// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240718201858_UpdateUsrLv_v1")]
    partial class UpdateUsrLv_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_detail");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_state");

                    b.Property<string>("AddressSuburb")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_suburb");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("cntact_email");

                    b.Property<string>("ContactMobile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("contact_mbile");

                    b.Property<string>("ContactTel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contact_tel");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_date");

                    b.Property<bool>("LoginPermit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("login_permit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password_hash");

                    b.Property<int>("PostCode")
                        .HasColumnType("int")
                        .HasColumnName("postcode");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("register_date");

                    b.Property<int>("UserLv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3)
                        .HasColumnName("user_lv");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user_table", t =>
                        {
                            t.HasCheckConstraint("CK_User_UserId_Range", "[UserId] >= 10000000 AND [UserId] <= 99999999");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
